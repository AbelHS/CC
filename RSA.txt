#include <fstream>
#include <sstream>
#include <stdio.h>
#include <NTL/ZZ.h>

using namespace std;
using namespace NTL;


string convertirSZZ(ZZ entero)
{   string cadena;
    stringstream convert;
    convert << entero;
    cadena = convert.str(); ///asigna cadena Al contenido del flujo
    return cadena;
}

string convertirSINT(int entero)
{   string cadena;
    stringstream convert;
    convert << entero;
    cadena = convert.str(); ///asigna cadena Al contenido del flujo
    return cadena;
}

int convertirZZ(ZZ entero)
{
    int temp;
    conv(temp, entero);
    return temp;
}


ZZ convertirINT(int entero)
{
    ZZ temp;
	conv(temp, entero);
	return temp;
}

ZZ mod(ZZ a, ZZ b)
{
	ZZ r, q;
	q = a/b;
	r = a-(b*q);
	if(r<ZZ(0)){return r+b;}
	return r;
}

ZZ euclides(ZZ a, ZZ b)
{
	ZZ r;
	while(b>ZZ(0))
    {
		r = mod(a,b);
		a = b;
		b = r;
	}

	return a;
}

ZZ inv(ZZ a, ZZ b)
{
	ZZ r, q, x, x1, x2;
	if(b==ZZ(0)) {
		x2=ZZ(1);
		return x2;
	}
	else {
		x1=ZZ(0);
		x2=ZZ(1);
		while(b>ZZ(0)) {
			q = a/b;
			r = a - (q * b);
			x = x2 - (q * x1);
			a = b;
			b = r;
			x2 = x1;
			x1 = x;
		}
		return x2;
	}
}


ZZ exponenciacion(ZZ a, ZZ m, ZZ n)
{
	ZZ r = ZZ(1);
	while(m>ZZ(0)){
		if((m&1)==1){
			r = mod(r*a,n);
		}
		a = mod(a*a,n);
		m>>=1;
	}
	return r;
}


ZZ string_ZZ(string cadena)
{
	ZZ p(INIT_VAL, cadena.c_str()); ///Devuelve un puntero a s
	return p;
}



class RSA
{
	private:
		ZZ p;
		ZZ q;
		ZZ d;
		ZZ phi;

	public:
		ZZ e;
		ZZ n;
		string alfabeto;
        RSA();
        RSA(ZZ e, ZZ n);
        ZZ Ge(ZZ phi);
        ZZ Gd(ZZ e, ZZ n);
        ZZ indice(ZZ M);
        //string *cifrar(string[]);
        ZZ cifrar(string);
        int descifrar(ZZ);


//int RSA::descifrar(ZZ cifrado)

};


RSA::RSA()
{
    alfabeto = "0123456789abcdefghijklmnopqrstuvwxyz, ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    GenPrime(p,512); // GenPrime generates a random prime n of length
    GenPrime(q,512);
    n = p*q;
    phi = (p-1)*(q-1);
    e = Ge(phi);
    d = Gd(e,phi);
}

RSA::RSA(ZZ e, ZZ n)
{
    alfabeto = "0123456789abcdefghijklmnopqrstuvwxyz, ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    this->e = e;
    this->n = n;
}

ZZ RSA::Ge(ZZ phi)
{
    e = RandomLen_ZZ(512);
    while(euclides(e,phi)!=1) {
        e = RandomLen_ZZ(512);
    }
    return e;
}


ZZ RSA::Gd(ZZ e, ZZ n)
{
    d = inv(e,phi);
    return d;
}


ZZ RSA::indice(ZZ M)
{
    ZZ a1=exponenciacion(M, mod(d, p-1), p);
    ZZ a2=exponenciacion(M, mod(d, q-1), q);

    return mod( mod(a1*inv(p, q)*p, n) + mod(a2*inv(q, p)*q, n), n);
}

/*
string RSA::cifrar(string plano)
{
    int indice = alfabeto.find(plano[0]);
    ZZ indice2 = convertirINT(indice);
    ZZ indice3 = exponenciacion(indice2,e,n);
    string mensaje = convertirSZZ(indice3);

    return mensaje;
}
*/


ZZ RSA::cifrar(string plano)
{
    int indice = alfabeto.find(plano[0]);
    ZZ indice2 = convertirINT(indice);
    ZZ indice3 = exponenciacion(indice2,e,n);
    return indice3;

    //string mensaje = convertirSZZ(indice3);

    //return mensaje;
}



/*


string *RSA::cifrar(string plano[])
{
    int len = sizeof(plano)/sizeof(plano[0]);
    string temp[5];
    cout << "hola " << endl;
    for(int i=0; i<5; i++)
    {


    int indice = alfabeto.find(plano[i][0]);
    ZZ indice2 = convertirINT(indice);
    ZZ indice3 = exponenciacion(indice2,e,n);
    string mensaje = convertirSZZ(indice3);

    temp[i] = mensaje;
    //cout << temp[i] << endl<< endl<< endl;
    }
    //string*t= temp;

    return temp;
}
*/

int RSA::descifrar(ZZ cifrado)
{
    //ZZ indi = string_ZZ(cifrado);

    //cout <<"indi? " << indi <<endl;
    ///ZZ indice3 = exponenciacion(indi,d,n);

    /*
    ZZ indi2 = indice(indi); ///indice palabra alfabeto
    int indi3 = convertirZZ(indi2);/// mismo valor que anterior pero en int
    string mensaje = "0";
    mensaje[0] = alfabeto[indi3];
    return mensaje;
    */

    ZZ temp = exponenciacion( mod(cifrado,n) ,d,n);
    int temp2 = convertirZZ(temp);


    //cout <<"sera? " << indice3 <<endl;
    //string mensaje = "0";
//    mensaje[0] = alfabeto[indice3];
    return temp2;
}



int main()
{
    string alfabeto = "0123456789abcdefghijklmnopqrstuvwxyz, ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    string a[5] = {"2","G","a","R", "a"};

    RSA Receptor;

    ZZ cifrado[5];
    for(int i=0; i<5; i++){
    cifrado[i]  = Receptor.cifrar(a[i]);
    cout << cifrado[i]  << endl<< endl;
    }

    //Receptor.descifrar(cifrado[0]);



    //long long numero = 99999999999999999;
    //printf("Numero largo: %I64d\n",numero);

    cout << endl<< endl;
    for(int i=0; i<5; i++)
    cout << " test "<<alfabeto[Receptor.descifrar(cifrado[i])]<<endl;



    /*
    string TT = "3";
    ZZ tt = string_ZZ(TT);

    int yyy = convertirZZ(tt);
    cout << a[yyy];
*/
    return 0;
}
